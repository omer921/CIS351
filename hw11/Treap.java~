public class Treap {
  
  int key;
  int priority;
  Treap left;
  Treap right;
  
  public Treap(int key, int priority)
  {
   this.key = key; 
   this.priority = priority;
   left = null;
   right = null;
  }
  
  
  public Treap(int key, int priority, Treap left, Treap right)
  {
   this.key = key; 
   this.priority = priority;
   this.left = left;
   this.right = right;
  }
  
  public void addTreap(Treap nNode)
  {
   //System.out.println("Adding: " + nNode.key);
   Boolean skip = false;
   if (nNode.priority < this.priority )
    {
      if (nNode.key < this.key)
        nNode.setLeft(this);
      else
        nNode.setRight(this);
      skip = true;
   }
   if (this.left == null)
    {
     //System.out.println("in the left null with: " + nNode.key);
      if (this.key > nNode.key)
      {
        this.setLeft(nNode);
        //System.out.println("setting left");
        skip = true;
      }
      
    }
   if (this.right == null)
   {
     //System.out.println("in the right null with: " + nNode.key);
     if (this.key < nNode.key)
     {
        this.setRight(nNode);
        //System.out.println("setting right");
        skip = true;
     }
   }
   if (!skip)
   {this.addTreapHelp(nNode); /*System.out.println("getting help with: " + nNode.key);*/}
  }
  
  public void addTreapHelp(Treap nNode)
  {
    //System.out.println("Adding: " + nNode.key);
    if (this.key < nNode.key)
    {
      if (left != null)
       left.addTreapHelp(nNode);
      else
        setLeft(nNode);
    }
    else if (this.key > nNode.key) 
    {
      if(right != null)
       right.addTreapHelp(nNode);
      else
        setRight(nNode);
    }
    else {
      if (nNode.key < this.key)
      {
        this.setLeft(nNode);
      }
      else
      {
        this.setRight(nNode);
      }
    }
  }
  
  
  
  public void setLeft(Treap left)
  {
   this.left = left;
  }
  
  public void setRight(Treap right)
  {
   this.right = right; 
  }
  
  public void setKey()
  {
   this.key = key;
  }
  
  public void setPri()
  {
   this.priority = priority;
  }

 public void print(int depth)  {
    int i;

    
    // Print the left subtree (or a dash if there is a right child
    // and no left child)
    if (left != null)
      left.print(depth+1);
    else if (right != null) {
      for (i = 1; i <= depth+1; i++)
        System.out.print("    ");
      System.out.println("--");
    }
    
    
    // Print the indentation and the data from the current node:
    for (i = 1; i <= depth; i++)
      System.out.print("    ");
    System.out.println(key);
    
    // Print the left subtree (or a dash if there is a left child
    // and no left child)
    if (right != null)
      right.print(depth+1);
    else if (left != null)  {
      for (i = 1; i <= depth+1; i++)
        System.out.print("    ");
      System.out.println("--");
    }
  }
 
 public void rotateRight()
 {
   Treap p = this.left;
   Treap newN = new Treap(this.key, this.priority, this.left, this.right);
   this.key = p.key;
   this.priority = p.priority;
   this.left = p.left;
   this.right = newN;
 }
 
 public void rotateLeft()
 {
   Treap p = this.right;
   Treap newN = new Treap(this.key, this.priority, this.right, this.left);
   this.key = p.key;
   this.priority = p.priority;
   this.right = p.right;
   this.left = newN;
 }
 
  public boolean isLeaf()
 { return ((left == null) && (right == null));}
 
 public Treap splitAt(int v)
 {
  Treap ans = new Treap (v, 0);
  if (this.isLeaf())
  {
    //System.out.println(this.key + " is a leaf");
    return this;
  }
  else
  {
   Treap nN = new Treap(this.key, this.priority);
   ans.addTreap(nN); 
   if (this.left != null){
     //System.out.println("splitting left " + left.key);
     ans.addTreap(this.left);
     //ans.addTreap(left.splitAt(v));
   }
   if (this.right != null){
     //System.out.println("adding right " + right.key);
     ans.addTreap(this.right); 
     //ans.addTreap(right.splitAt(v));
   }
  }
  return ans; 
 }
 

  
}