import java.util.NoSuchElementException;

/** Tests for the IList class */
public class Tests {
  /** This contains lots and lots of tests.  
    * You can add some more if you want, but 
    * don't delete any of the ones here. 
    */
  public static void main(String argv[]) {
    boolean flag;
    IList empty = new IList();
    IList one2ten = new IList(1, 2, 3, 4, 5, 6, 7, 8, 9 , 10);   
    IList ten2one = new IList(10, 9, 8, 7, 6, 5, 4, 3, 2 , 1);  
    IList lst1, lst2, lst3, lst4;

    // Tests for the IList constructor
    System.out.println(empty + " should be empty");
    System.out.println(one2ten + " should be 1 through 10");
    
    // Tests for firstVal    
    if (1 != one2ten.firstVal()) 
      System.out.println("firstVal failure on: "+one2ten);
    flag = false;
    try { int x = empty.firstVal(); }
    catch (NoSuchElementException e) { flag = true; }
    finally { 
      if (!flag) System.out.println("firstVal fails on an empty list"); 
    }

    // Tests for lastVal    
    if (10 != one2ten.lastVal()) 
      System.out.println("lastVal failure on: "+one2ten);
    flag = false;
    try { int x = empty.lastVal(); }
    catch (NoSuchElementException e) { flag = true; }
    finally { 
      if (!flag) System.out.println("lastVal fails on an empty list"); 
    }

    // Tests for isEmpty
    if (one2ten.isEmpty()) System.out.println("isEmpty fails on: "+ one2ten);
    if (!empty.isEmpty()) System.out.println("isEmpty fails on an empty list");
    
    // Tests for addFirst
    lst1 = new IList();
    for (int i=10;i>0;i--) lst1.addFirst(i);
    if (!one2ten.equals(lst1)) 
      System.out.println("addFirst failed on " + lst1);

    // Tests for addLast
    lst1 = new IList();
    for (int i=1;i<11;i++) lst1.addLast(i);
    if (!one2ten.equals(lst1)) 
      System.out.println("addFirst failed on " + lst1);

    // Tests for removeFirst
    lst1 = new IList(99);
    lst1.removeFirst();
    if (!lst1.isEmpty()) System.out.println("removeFirst failed on " + lst1);
    lst1 = new IList(1,2,3,4,5);
    lst1.removeFirst();
    if (!lst1.equals(new IList(2,3,4,5)))
      System.out.println("removeFirst failed on " + lst1);
    flag = false;
    try { empty.removeFirst(); }
    catch (NoSuchElementException e) { flag = true; }
    finally { 
      if (!flag) System.out.println("removeFirst fails on an empty list"); 
    }
    
    // Tests for removeLast
    lst1 = new IList(99);
    lst1.removeLast();
    if (!lst1.isEmpty()) System.out.println("removeLast failed on " + lst1);
    lst1 = new IList(1,2,3,4,5);
    lst1.removeLast();
    if (!lst1.equals(new IList(1,2,3,4)))
      System.out.println("removeLast failed on " + lst1);
    flag = false;
    try { empty.removeFirst(); }
    catch (NoSuchElementException e) { flag = true; }
    finally { 
      if (!flag) System.out.println("removeLast fails on an empty list"); 
    }
    
    // Tests for copy
    lst1 = new IList(1, 2, 3, 4, 5, 6, 7, 8, 9, 10);
    lst2 = lst1.copy();
    if (!lst2.equals(lst1))
      System.out.println("copy failure: " +lst1 + " and " + lst2);
    lst2.bump(99);
    if (!lst1.equals(one2ten)) 
      System.out.println(
         "copy failure: source list has INode's in common with copy");
    lst2 = empty.copy();
    if (!lst2.isEmpty()) 
      System.out.println("copy failure: copy of empty list not empty");
   
    // Tests for reverse
    lst1 = empty.reverse();
    if (!lst1.isEmpty())
      System.out.println("reverse failure on empty list");
    lst2 = new IList(99);
    lst1 = lst2.reverse();
    if (!lst1.equals(lst2))
      System.out.println("reverse failure on "+lst2);
    lst1 = one2ten.reverse();
    if (!lst1.equals(ten2one))
      System.out.println("reverse failure on "+lst1);

    // Tests for take and drop
    lst2 = empty.take(5);
    if (!lst2.isEmpty()) 
      System.out.println("take fails on an empty list");
    lst2 = empty.drop(5);
    if (!lst2.isEmpty()) 
      System.out.println("drop fails on an empty list");
    lst1 = new IList(1,2,3,4,5,6,7,8,9,10);
    lst2 = lst1.take(5);
    if (!lst2.equals(new IList(1,2,3,4,5))) 
      System.out.println("take 5 fails on " + one2ten);
    lst2.bump(20);
    if (!lst1.equals(one2ten))
      System.out.println("take's result shares INodes with its source");
    lst1 = new IList(1,2,3,4,5,6,7,8,9,10);    
    lst2 = lst1.drop(5);
    if (!lst2.equals(new IList(6,7,8,9,10))) 
      System.out.println("drop 5 fails on an " + one2ten);
    lst2.bump(20);
    if (!lst1.equals(one2ten))
      System.out.println("drop's result shares INodes with its source");

    // Tests for appendAfter and drop and take
    lst1 = new IList(1,2,3,4,5,6,7,8,9,10);
    for(int i=0; i<12; i++) {
      lst2 = lst1.drop(i);
      lst3 = lst1.take(i);
      lst4 = lst3.copy();
      lst4.appendAfter(lst2);
      if (!lst4.equals(lst1))
        System.out.println("appendAfter on "+ lst2 + " and " + lst3 
      + " incorrectly yields " + lst4);
    }
    
    // Tests for delete
    lst1 = new IList();
    lst1.delete(99);
    if (!lst1.isEmpty()) 
      System.out.println("delete 99 fails on the empty list");
    lst1 = new IList(99);
    lst1.delete(99);
    if (!lst1.isEmpty()) 
      System.out.println("delete 99 fails on [99]");
    lst1 = new IList(99);
    lst1.delete(88);
    if (!lst1.equals(new IList(99))) 
      System.out.println("delete 88 fails on [99]");

    lst1 = new IList(1,2,3);
    lst2 = new IList(1,2,3);
    if (!lst1.equals(lst2)) System.out.println("???");


    lst1 = new IList(1,2,3,4);
    lst1.delete(1);
    if (!lst1.equals(new IList(2,3,4)))
      System.out.println("delete 1 fails on [1,2,3,4] with result "+lst1);
    lst1 = new IList(1,2,3,4);
    lst1.delete(2);
    if (!lst1.equals(new IList(1,3,4)))
      System.out.println("delete 2 fails on [1,2,3,4] with result "+lst1);
    lst1 = new IList(1,2,3,4);
    lst1.delete(3);
    if (!lst1.equals(new IList(1,2,4)))
      System.out.println("delete 3 fails on [1,2,3,4] with result "+lst1);
    lst1 = new IList(1,2,3,4);
    lst1.delete(4);
    if (!lst1.equals(new IList(1,2,3)))
      System.out.println("delete 4 fails on [1,2,3,4] with result "+lst1);

    // Tests for deleteAll
    lst1 = new IList();
    lst1.deleteAll(99);
    if (!lst1.isEmpty()) 
      System.out.println("deleteAll 99 fails on the empty list");
    lst1 = new IList(99);
    lst1.deleteAll(99);
    if (!lst1.isEmpty()) 
      System.out.println("deleteAll 99 fails on [99]");
    lst1 = new IList(99);
    lst1.deleteAll(88);
    if (!lst1.equals(new IList(99))) 
      System.out.println("deleteAll 88 fails on [99]");

    lst1 = new IList(1,1,1,1,1);
    lst1.deleteAll(1);
    if (!lst1.isEmpty())
      System.out.println("deleteAll 1 fails on [1,1,1,1,1] with result "+lst1);
    lst1 = new IList(1,1,2,3,4);
    lst1.deleteAll(1);
    if (!lst1.equals(new IList(2,3,4)))
      System.out.println("deleteAll 1 fails on [1,1,2,3,4] " +
    "with result "+lst1);
    lst1 = new IList(1,1,2,1,1,3,4);
    lst1.deleteAll(1);
    if (!lst1.equals(new IList(2,3,4)))
      System.out.println("deleteAll 1 fails on [1,1,2,1,1,3,4] " +
    "with result "+lst1);
    lst1 = new IList(1,1,2,1,1,3,4,1,1,1);
    lst1.deleteAll(1);
    if (!lst1.equals(new IList(2,3,4)))
      System.out.println("deleteAll 1 fails on [1,1,2,1,1,3,4,1,1,1] " +
    "with result "+lst1);
   }
}